package gen

import (
	"github.com/hofstadter-io/schemas/gen"

  "github.com/blebbit/flexicon/codegen/schema"
)

Generator: gen.Generator & {

	ModuleName: string | *"github.com/blebbit/flexicon"

  In: {
    Lexicon: [...schema.#Lexicon]
  }

  	// Actual files generated by hof, combined into a single list
	Out: [...gen.File] & _All

	// Everything below here is for convenience
	_All: [
		// for _, F in _OnceFiles {F},
		for _, F in _LexiconJson {F},
	]

  _LexiconJson: [...gen.File] & [
    {
      Filepath: "readme.md"
      TemplateContent: "hello world"
    },
    {
      Filepath: "sdk/server-ts/router.ts"
      TemplatePath: "sdk/server-ts/router.ts"
    },
    for l in In.Lexicon {
      Filepath: "lexicon/\(l.id).json"
      Val:      l
    },
    for l in In.Lexicon {
      Filepath: "sdk/\(l.id).ts"
			TemplatePath: "sdk/lexicon.ts"
			In: LEX: l
    },
  ]

  // // Files that are generated once per project
	// _OnceFiles: [...gen.File] & [
  //   {
	// 		TemplatePath: "go.mod"
	// 		Filepath:     "go.mod"
	// 	},
	// 	{
	// 		TemplatePath: "server.go"
	// 		Filepath:     "server.go"
	// 	},
	// 	{
	// 		TemplatePath: "router.go"
	// 		Filepath:     "router.go"
	// 	},
	// 	{
	// 		TemplatePath: "middleware.go"
	// 		Filepath:     "middleware.go"
	// 	},
	// 	// a conditional file
	// 	if Server.Auth != _|_ {
	// 		TemplatePath: "auth.go"
	// 		Filepath:     "auth.go"
	// 	},
	// ]

	// Template (top-level) TemplateConfig (globs+config)
	Templates: [{
		Globs: ["./codegen/templates/**/*"]
		TrimPrefix: "./codegen/templates/"
	}]

	// Partial (nested) TemplateConfig (globs+config)
	Partials: [{
		Globs: ["./codegen/partials/**/*"]
		TrimPrefix: "./codegen/partials/"
	}]

	// Statics are copied directly into the output, bypassing the rendering
	Statics: [{
		Globs: ["./codegen/statics/**/*"]
		TrimPrefix: "./codegen/statics/"
	}]


}